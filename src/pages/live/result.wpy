<!--pages/result/result.wxml-->
<template>   
  <view class="wrapper">
    <view class="progress">
      <resultCycleProgressBar :value.sync="process" :comment.sync="comment"></resultCycleProgressBar>
    </view>
    <view class="itemHead">
      <view class='item1'>姓名</view>
      <view class='item3'>胜-负</view>
      <view class='item2'>净胜分</view>
      <view class='item4'>名次</view>
    </view>
    <repeat for="{{result}}" key="{{item}}" index="index">
      <view  class="item itemBody">
        <view class='item1 NO-{{item[4]}}'>{{item[5]||item[6]}}</view>
        <view class='item3'>{{item[1]}}-{{item[2]}}</view>
        <view class='item2'>{{item[0]}}</view>            
        <view class='item4 NO-{{item[4]}}'>{{item[4]}}</view>
      </view>
  </repeat>
  </view>
</template>
<style lang="less" scoped>
@import '../../common/common.less';
.progress{
  background: @bgc-card;
  padding:30rpx;
  margin-top:40rpx;
}
.itemHead{
  display: flex;
  width:700rpx;
  margin:0 auto;
  height:80rpx;
  line-height: 80rpx;
  background: lightgreen;
  // margin-top: 40rpx;
  margin-bottom: -10rpx;
  // border-bottom: 10rpx solid cadetblue;
}
.item{
  display: flex;
  width:700rpx;
  margin:25rpx auto;
  height:80rpx;
  line-height: 80rpx;
  border-radius: 20rpx;
  background: #fff;
}
.item1{
  white-space:nowrap;
  overflow: hidden;
}
.item1,.item2,.item3,.item4{
  text-align: center;
  vertical-align: middle; 
}
.item1,.item2,.item3{
  width:180px
}
.item4{width:170rpx}
.NO-1,.NO-2,.NO-3{
  position: relative;
}
.NO-1::after,.NO-2::after,.NO-3::after{
  font-family: "iconfont";
  content: "\e725";
  font-size: 40rpx;
  position: absolute;
  /* top:0;
  right:0;
  z-index: 999; */
}
.NO-1::after{ 
  color: gold;
}
.NO-2::after{ 
  color: coral;
}
.NO-3::after{ 
  color: chartreuse;
}

</style>
<script>
import wepy from 'wepy';
import cycleProgressBar from "../../components/cycleProgressBar";
export default class Result extends wepy.page  {
  components={
    resultCycleProgressBar:cycleProgressBar
  }
  props= {
    groupList: {
      type:Array,
      default:[]
    },
    gameid:{
      type:String,
      default:null
    }
  }
  data={
    result:{},
    ifShowBtn:true,
    process:40,
    comment:'完成进度'
  }
  watch={
    groupList(newGroupList,oldGroup){
      console.log('groupList changed',newGroupList)
      this.process = this.calcProcess(newGroupList);
      let calcedScore = this.calcScore(newGroupList);
      console.log('calcedScore',calcedScore)
      let orderedScore = this.orderScore(calcedScore);
      this.result= orderedScore;
      console.log(this.result)
    }
  }
  methods={
    getResult(){
    this.ifShowBtn=false
    let calcedScore = this.calcScore(this.groupList);
    let orderedScore = this.orderScore(calcedScore);
    this.result= orderedScore;
    }
  }
  calcScore(groupList) {
    let result = {}
    let uKey=['id_a1','id_a2','id_b1','id_b2']
    for (let groupInfo of groupList) {
      // console.log(groupInfo)
      for (let i = 0; i < 4; i++) {
        let key=uKey[i]
        // console.log(key)
        let playerId=groupInfo[key].uid//获取userid
        let playerRealName=groupInfo[key].real_name//获取userid
        let playerNickName=groupInfo[key].nick_name//获取userid
        let playerAvatarUrl=groupInfo[key].avatar_url//获取userid
        result[playerId] = result[playerId] || [0, 0, 0,0,0,playerRealName,playerNickName,playerAvatarUrl];//初始化结果数组【净胜分、胜场、负场、胜负差值、名次、姓名、昵称、头像】
        if (i < 2) {
          result[playerId][0] += (groupInfo.score_a - groupInfo.score_b);
          result[playerId][1] += (groupInfo.score_a > groupInfo.score_b? 1 : 0);
          result[playerId][2] += (groupInfo.score_a < groupInfo.score_b ? 1 : 0);
        } else {
          result[playerId][0] += (groupInfo.score_b - groupInfo.score_a);//[0]是净胜分
          result[playerId][1] += (groupInfo.score_a < groupInfo.score_b ? 1 : 0);//[1]胜的场次
          result[playerId][2] += (groupInfo.score_a > groupInfo.score_b ? 1 : 0);//[2]负的场次
        }
        result[playerId][3] = result[playerId][1] - result[playerId][2];//[3]是胜-败的差值
        // console.log(playerId,result[playerId],groupInfo)
      }
    }
    return result;
  }
  orderScore(obj) {
    let keys = Object.keys(obj);
    let orderedKeys = [];
    for (let i = 0; i < keys.length; i++) {
      let key_of_max = this.findKeyOfMax(obj, orderedKeys);
      orderedKeys.push(key_of_max)
    }
    let newObj = {};
    for (let i=0; i < orderedKeys.length; i++) {
      newObj[orderedKeys[i]] = obj[orderedKeys[i]].slice()
      newObj[orderedKeys[i]][4]=i + 1     //[4]是名次
    }
    return newObj;
  }
  findKeyOfMax(obj, orderedKeys) {
    let keys = Object.keys(obj);
    let key_of_max = '';
    for (let i = 0; i < keys.length; i++) {
      if (orderedKeys.indexOf(keys[i]) !== -1) {//对于已经被找到的值 排除在本次查询之外
        continue;
      }
      if (!key_of_max) {//把第一个在查询范围内的值赋值为max
        key_of_max = keys[i];
        continue;
      }
      if (obj[key_of_max][3] > obj[keys[i]][3]) {//先比较 胜/负比
        // key_of_max = keys[i];
      } else if (obj[key_of_max][3] < obj[keys[i]][3]) {
        key_of_max = keys[i];
      } else {
        if (obj[key_of_max][0] >= obj[keys[i]][0]) {//再比较净胜分
          // key_of_max  = keys[i]
        } else {
          key_of_max = keys[i];
        }
      }
    }
    return key_of_max;
  }
  calcProcess(groupList){
    let doneList=groupList.filter(groupInfo => {
      console.log('groupInfo.status',groupInfo.status)
      return groupInfo.status
    });
    return Math.round(doneList.length/groupList.length*100,2)
  }
}
</script>


