
<template>
  <view class="container">
    <LiveHeader :titleList.sync="titleList" :selectedItem.sync="activeBar"></LiveHeader>
    <baseData  wx:if="{{activeBar===titleList[0]}}" :playersList.sync="playersList" :gameid.sync="gameid"></baseData>
    <againstTable wx:if="{{activeBar===titleList[1]}}" :groupList.sync="groupList" :gameid.sync="gameid"></againstTable>
    <result  wx:if="{{activeBar===titleList[2]}}" :groupList.sync="groupList" :gameid.sync="gameid"></result>
  </view>
</template>

<style lang="less" scoped>
  @import '../../common/common.less';
</style>


<script>
import wepy from 'wepy'
import { getGroupInfo,downLoadMatchInfo,transGroupListToGroupListWithPlayerInfo,share} from "../../common/common";
import header from '../../components/header'
import baseData from './baseData'
import againstTable from './againstTable'
import result from "./result"
export default class Live extends wepy.page {
  config = {
    navigatorBatText:'比赛实况'
  }
  components={
    LiveHeader:header,
    baseData:baseData,
    againstTable:againstTable,
    result:result
  }
  data={
    playersList:[],
    groupList:[],
    // groupListWithUserInfo:[],
    gameid:null,
    titleList:['设置','对阵表','时实战况'],
    activeBar:'设置'
  }
  onShareAppMessage(){
   return  share('/pages/live/lve?gameid='+this.gameid)
 }
  async onLoad(options){
    this.gameid= parseInt(options.gameid)
  }
  watch={
    async gameid(newGameId){
      console.log('gameid changed',newGameId)
      let res=await this.getPlayerAndGroupList(newGameId)
      this.playersList=res[0]
      this.groupList=res[1]
      this.$apply()
    },
      groupList(n,o){
      console.log('grouplist changed fn in live',n,o)
    }
 
  }
  events={
    changeActiveBar(from){
      if(from==='from baseData'){
        this.activeBar=this.titleList[1]
      }
    },
    async updataGroupList(){
      let res=await this.getPlayerAndGroupList(this.gameid)
      this.playersList=res[0]
      this.groupList=res[1]
      // [this.playersList,this.groupList]
      this.$apply()
    }
  }
  async getPlayerAndGroupList(gameid){
     let groupUidList=[]
     let groupList=[]
     let playersList=[]
      let matchInfo=await downLoadMatchInfo(gameid)
      if(matchInfo.players){
        playersList=matchInfo.players
      }else{return}
      if(matchInfo.group){
        groupUidList=matchInfo.group
      }else{return}
      groupList=transGroupListToGroupListWithPlayerInfo(groupUidList,playersList)
      groupList.forEach(groupInfo => {
        groupInfo.score_a=(groupInfo.score_a||0)
        groupInfo.score_b=(groupInfo.score_b||0)
        groupInfo.status=(groupInfo.status||0)
      });
      console.log('[playersList,groupList],fn',playersList,groupList)
      return [playersList,groupList]
}
}
</script>

