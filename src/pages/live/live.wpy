
<template>
  <view class="container">
    <LiveHeader :titleList.sync="titleList" :selectedItem.sync="activeBar"></LiveHeader>
    <block   wx:if="{{activeBar===titleList[0]}}">
  <matchBaseInfoInlive :matchInfo.sync="matchInfo"></matchBaseInfoInlive>
  <playersListInlive :matchInfo.sync="matchInfo"></playersListInlive>
    <matchDataSetInlive  :matchInfo.sync="matchInfo" ></matchDataSetInlive>
    </block>
    <againstTableInlive wx:if="{{activeBar===titleList[1]}}" 
                        :matchInfo.sync="matchInfo" ></againstTableInlive>
    <matchResultInlive  wx:if="{{activeBar===titleList[2]}}" 
                        :matchInfo.sync="matchInfo" ></matchResultInlive>
  </view>
</template>

<style lang="less" scoped>
  @import '../../common/common.less';
</style>


<script>
import wepy from 'wepy'
import {initUserInfo, getGroupInfo,downLoadMatchInfo,share,updateMatchInfo,calcprogress} from "../../common/common";
import header from '../../components/header'
import matchDataSet from '../../components/matchDataSet'
import playersList from '../../components/playersList'
import matchBaseInfo from '../../components/matchBaseInfo'
import againstTable from '../../components/againstTable'
import matchResult from '../../components/matchResult'
export default class Live extends wepy.page {
  config = {
    navigatorBatText:'比赛实况'
  }
  components={
    LiveHeader:header,
    matchDataSetInlive:matchDataSet,
    playersListInlive:playersList,
    matchBaseInfoInlive:matchBaseInfo,
    againstTableInlive:againstTable,
    matchResultInlive:matchResult
  }
  data={
    matchInfo:{},
    gameid:null,
    limit:null,
    titleList:['设置','对阵表','时实战况'],
    activeBar:'设置'
  }
  onShareAppMessage(){
   return  share('/pages/live/lve?gameid='+this.gameid)
 }
  async onLoad(options){
    this.gameid= parseInt(options.gameid)
    this.matchInfo=await downLoadMatchInfo(this.gameid)
    this.$apply()

  }
  events={
    changeActiveBar(from){
      if(from==='from baseData'){
        this.activeBar=this.titleList[1]
      }
    },
    async updataMatchInfo(){//当重新生成对阵表的时候 需要更新matchinfo中的信息
      this.matchInfo=await downLoadMatchInfo(this.gameid)
      // console.log('updataMatchInfo id runing',this.matchInfo)
      this.$apply()
    },
    updataScoreOfMatch(matchInfo){
      this.matchInfo.progressData=calcprogress(matchInfo)
      if(this.matchInfo.progressData.progress===100){
        this.matchInfo.status=3
        updateMatchInfo(this.gameid,{status:3})
      }else{
        this.matchInfo.status=2
        updateMatchInfo(this.gameid,{status:2})
      }
      this.matchInfo.groupWithInfo=matchInfo.groupWithInfo
      this.$apply()
    }
  }
}
</script>

