
<template>
  <view class="warp">
  <view class="label">每人场数</view>
  <input type="number" name="" 
        class="roundCount" value="{{roundCount}}"
        placeholder="请输入每人场次,与人数的乘积,应被4整除"
        @input="changeRoundCount"/>
  <view class="errTip label" wx:if="{{state!==1}}">{{msg}}</view>
  <button id="btn" @tap="makeGroup" 
          wx:if="{{limit!=='readOnly'}}">
          {{limit==='writableOnlyScore'?'重新':''}}生产对阵表</button>
  </view>
</template>

<style lang="less" scoped>
  @import '../common/common.less';
  .label{
    color: @font-side;
    font-weight: lighter;
    padding:20rpx;
    text-align:left;
    font-size:30rpx;
    background:#fff;
    margin-top:40rpx;
    margin-bottom:4rpx;
  }
  .roundCount{
    color: @font;
    text-align: center;
    padding:20rpx;
    text-align:center;
    font-size:36rpx;
    background:#fff;
    margin-bottom:40rpx;
  }
  .input-placeholder{
    font-size: 30rpx;
  }
  .label.errTip{
    margin-bottom: 40rpx;
    color:tomato;
    text-align: center;
  }
 
  #btn{
    margin:40rpx auto;
    width:450rpx;
    height:100rpx;
    line-height: 100rpx;
    vertical-align: middle;
    text-align: center;
  }
</style>


<script>
import wepy from 'wepy'
import { initUserInfo,postGroupList,updateMatchInfo,downLoadMatchInfo} from "../common/common"
import badmin from '../common/makeGroup'
// import playersList from './playersList'

export default class MatchDataSet extends wepy.component{
  components={
    // playersListMatchDataSet:playersList,
  }
  props={
    matchInfo:{
      type:Object,
      default:{}
    },
    limit:{
      type:String,
      default:'readOnly'
    }
  }
  data={
      groupList:[],
      playersList:[],
      gameid:null,
      roundCount:4,
      msg:'努力计算中',
      state:1
    }
 watch={
   matchInfo(matchInfo){
     this.playersList=matchInfo.players
     this.gameid=matchInfo.id
     this.$apply()
     console.log('matchInfo changed in baseData',matchInfo)
   },
   limit(n){
     console.log('limit changed in baseData page',n)}
 }
  async onLoad(options){}
  methods={
    async makeGroup(){
      this.state=0;
      this.msg='正在计算。。。。。。'
      let playersNum=this.playersList.length
      let roundCount=this.roundCount
      let groupListJustWithOrder=(new badmin(playersNum,roundCount)).result//拿到的结果只是用数字序号标示的
      if(typeof groupListJustWithOrder ==='string'){//如果成功的话，需要将数字序号改写为对应的人的信息
        this.state=2;
        this.msg=groupListJustWithOrder
        return
      }else{
        this.state=1;//计算成功的时候，
        this.groupList=this.transOrderWithPLayerId(groupListJustWithOrder,this.playersList)
        //得到用uid标示的对阵表后 将其提交到服务器  //此时服务器会将group信息存储在 matchInfo中
        //一旦生成对阵表 说明比赛开始了，也要去改变比赛的状态
        await postGroupList(this.gameid,this.groupList)
        await updateMatchInfo(this.gameid,{status:2})
        //通知 父页面去获取更新
        this.$emit('updataMatchInfo')
        //这个改变 是为了页面跳转
        this.$emit('changeActiveBar','from baseData')
        }
    },
    changeRoundCount(e){
      this.roundCount=e.detail.value
    }
  }
  // posttGroupList()
transOrderWithPLayerId(groupListJustWithOrder,playersList){
let groupListWithUid=[]
  let playersUidList=[]//先获取人员依次获取人员UID 按顺序排好
        this.playersList.forEach(playerInfo=>{
          playersUidList.push(playerInfo.userid)
        })
        //
        for(let i=0,len=groupListJustWithOrder[1].length;i<len;i++){
          let p1=playersUidList[groupListJustWithOrder[1][i]-1];//这是因为groupListJustWithOrder的存储方式是【【---】，【---】，【---】，【---】】
          let p2=playersUidList[groupListJustWithOrder[2][i]-1];//相同index上的 是要对阵的四个人员
          let p3=playersUidList[groupListJustWithOrder[3][i]-1];
          let p4=playersUidList[groupListJustWithOrder[4][i]-1];
          groupListWithUid.push([p1,p2,p3,p4])
        }
        return groupListWithUid
        }
}
</script>
